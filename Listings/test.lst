


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ;; Les deux LEDs sont initialement allumées
    3 00000000         ;; Ce programme lis l'état du bouton poussoir 1 connecté
                       e au port GPIOD broche 6
    4 00000000         ;; Si bouton poussoir fermé ==> fait clignoter les deux 
                       LED1&2 connectée au port GPIOF broches 4&5.
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    9 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   10 00000000         
   11 00000000         ; The GPIODATA register is the data register
   12 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   13 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   14 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   15 00000000         
   16 00000000         ; configure the corresponding pin to be an output
   17 00000000         ; all GPIO pins are inputs by default
   18 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   19 00000000         
   20 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   21 00000000         ; By default, all GPIO pins have 2-mA drive.
   22 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   23 00000000         
   24 00000000         ; Digital enable register
   25 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   26 00000000 0000051C 



ARM Macro Assembler    Page 2 


                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   27 00000000         
   28 00000000         ; Pul_up
   29 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   30 00000000         
   31 00000000         ; Broches select
   32 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   33 00000000         
   34 00000000 00000010 
                       BROCHE4 EQU              0x10        ; led1 sur broche 4
                                                            
   35 00000000         
   36 00000000 00000020 
                       BROCHE5 EQU              0x20        ; led2 sur broche 5
                                                            
   37 00000000         
   38 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bouton poussoir 1
                                                             et 2 sur broche 6 
                                                            et 7
   39 00000000         
   40 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                             sur broche 6
   41 00000000         
   42 00000000 00000080 
                       BROCHE7 EQU              0x80        ; bouton poussoir 2
                                                             sur broche 7
   43 00000000         
   44 00000000 00000003 
                       BROCHE0_1
                               EQU              0x03        ; bumpers 1 et 2 su
                                                            r broche 0 et 1
   45 00000000         
   46 00000000         
   47 00000000                 ENTRY
   48 00000000                 EXPORT           __main
   49 00000000         
   50 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   51 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   52 00000000         
   53 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   54 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit



ARM Macro Assembler    Page 3 


   55 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   56 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   57 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   58 00000000         
   59 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   60 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   61 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   62 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   63 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   64 00000000         
   65 00000000         __main
   66 00000000         
   67 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   68 00000000         ; ;;         
   69 00000000 4E5C            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   70 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b111
                                                            000)
   71 00000006         ; ;;                              (GPIO::FEDCBA)
   72 00000006 6030            str              r0, [r6]
   73 00000008         
   74 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   75 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   76 0000000A BF00            nop
   77 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   78 0000000E         
   79 0000000E         
   80 0000000E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION 2 LEDs
   81 0000000E         
   82 0000000E 4E5A            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   83 00000010 F04F 0030       ldr              r0, = BROCHE4_5
   84 00000014 6030            str              r0, [r6]
   85 00000016         



ARM Macro Assembler    Page 4 


   86 00000016 4E59            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   87 00000018 F04F 0030       ldr              r0, = BROCHE4_5
   88 0000001C 6030            str              r0, [r6]
   89 0000001E         
   90 0000001E 4E58            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   91 00000020 F04F 0030       ldr              r0, = BROCHE4_5
   92 00000024 6030            str              r0, [r6]
   93 00000026         
   94 00000026 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
   95 0000002A         
   96 0000002A         ; allumer la led broche 4 (BROCHE4_5)
   97 0000002A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
   98 0000002E         
   99 0000002E 4E55            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  100 00000030         
  101 00000030         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
  102 00000030         
  103 00000030         
  104 00000030         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 
  105 00000030         
  106 00000030 4F55            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  107 00000032 F04F 00C0       ldr              r0, = BROCHE6_7
  108 00000036 6038            str              r0, [r7]
  109 00000038         
  110 00000038 4F54            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  111 0000003A F04F 00C0       ldr              r0, = BROCHE6_7
  112 0000003E 6038            str              r0, [r7]
  113 00000040         
  114 00000040 4F53            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6_7<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  115 00000042         
  116 00000042         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher
  117 00000042         
  118 00000042         
  119 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper 
  120 00000042         
  121 00000042 F8DF 8150       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU



ARM Macro Assembler    Page 5 


R 
                                                            ;; Pul_up 
  122 00000046 F04F 0003       ldr              r0, = BROCHE0_1
  123 0000004A F8C8 0000       str              r0, [r8]
  124 0000004E         
  125 0000004E F8DF 8148       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  126 00000052 F04F 0003       ldr              r0, = BROCHE0_1
  127 00000056 F8C8 0000       str              r0, [r8]
  128 0000005A         
  129 0000005A F8DF 8140       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
0_1<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Bumper
  130 0000005E         
  131 0000005E         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Bumper 
  132 0000005E         
  133 0000005E         
  134 0000005E         ChooseProgram
  135 0000005E F8D7 A000       ldr              r10, [r7]
  136 00000062 F1BA 0F40       CMP              r10, #0x40  ; Check if switch 1
                                                             is pushed
  137 00000066 D015            BEQ              Program1
  138 00000068 F1BA 0F80       CMP              r10, #0x80  ; Check if switch 2
                                                             is pushed
  139 0000006C D000            BEQ              Program2
  140 0000006E E7F6            B                ChooseProgram
  141 00000070         
  142 00000070         
  143 00000070         
  144 00000070         Program2
  145 00000070         
  146 00000070         Init
  147 00000070 F04F 0400       ldr              r4, =0x0
  148 00000074 F04F 0500       ldr              r5, =0x0
  149 00000078 E7FF            B                Main
  150 0000007A         
  151 0000007A         Main
  152 0000007A F1BA 0F40       CMP              r10, #0x40  ; Check if switch 1
                                                             is pushed
  153 0000007E D003            BEQ              gPlus1
  154 00000080 F1BA 0F80       CMP              r10, #0x80  ; Check if switch 2
                                                             is pushed
  155 00000084 D003            BEQ              dPlus1
  156 00000086 E7F8            B                Main
  157 00000088         
  158 00000088         gPlus1
  159 00000088 F104 0401       ADD              r4, #1
  160 0000008C E7F5            B                Main
  161 0000008E         
  162 0000008E         dPlus1
  163 0000008E F105 0501       ADD              r5, #1
  164 00000092 E7F2            B                Main
  165 00000094         
  166 00000094         
  167 00000094         



ARM Macro Assembler    Page 6 


  168 00000094         
  169 00000094         Program1
  170 00000094         ; Configure les PWM + GPIO
  171 00000094 F7FF FFFE       BL               MOTEUR_INIT
  172 00000098         
  173 00000098         ; Activer les deux moteurs droit et gauche
  174 00000098 F7FF FFFE       BL               MOTEUR_DROIT_ON
  175 0000009C F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  176 000000A0         
  177 000000A0         ; Evalbot avance droit devant
  178 000000A0 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  179 000000A4 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  180 000000A8         
  181 000000A8 E061            B                MainProgram1
  182 000000AA         
  183 000000AA         CheckBumpers
  184 000000AA F8D8 A000       ldr              r10, [r8]
  185 000000AE F1BA 0F02       CMP              r10, #0x02  ; Check if left one
                                                             is pushed
  186 000000B2 D04A            BEQ              waitBumperRight
  187 000000B4 F1BA 0F01       CMP              r10, #0x01  ; check if right on
                                                            e is pushed
  188 000000B8 D050            BEQ              waitBumperleft
  189 000000BA         
  190 000000BA E010            B                TurnOffLeds ; if none, turn off
                                                             leds
  191 000000BC         
  192 000000BC         TurnOnLeds
  193 000000BC 4E31            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  194 000000BE F04F 0330       ldr              r3, = BROCHE4_5
  195 000000C2 6033            str              r3, [r6]
  196 000000C4 E02C            B                HalfTurn
  197 000000C6         
  198 000000C6         TurnOnLed1
  199 000000C6 4E36            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4<<2)
  200 000000C8         ;str r2, [r6] ; Turns off Led 1
  201 000000C8         
  202 000000C8 4E36            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
5<<2)
  203 000000CA F04F 0320       ldr              r3, = BROCHE5
  204 000000CE 6033            str              r3, [r6]
  205 000000D0 E017            B                LeftDirection
  206 000000D2         
  207 000000D2         TurnOnLed2
  208 000000D2 4E34            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
5<<2)
  209 000000D4         ;str r2, [r6] ; Turns off Led 2
  210 000000D4         
  211 000000D4 4E32            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4<<2)
  212 000000D6 F04F 0310       ldr              r3, = BROCHE4 ; Turns on Led 1
  213 000000DA 6033            str              r3, [r6]
  214 000000DC E002            B                RightDirection
  215 000000DE         
  216 000000DE         TurnOffLeds
  217 000000DE 4E29            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)



ARM Macro Assembler    Page 7 


  218 000000E0 6032            str              r2, [r6]
  219 000000E2 E7E2            B                CheckBumpers
  220 000000E4         
  221 000000E4         RightDirection
  222 000000E4 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  223 000000E8 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  224 000000EC F000 F829       BL               WAIT
  225 000000F0 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ; MOTEUR_D
                                                            ROIT_INVERSE
  226 000000F4 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  227 000000F8 F000 F823       BL               WAIT
  228 000000FC F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  229 00000100 E7D3            B                CheckBumpers
  230 00000102         
  231 00000102         
  232 00000102         LeftDirection
  233 00000102 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  234 00000106 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  235 0000010A F000 F81A       BL               WAIT
  236 0000010E F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  237 00000112 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  238 00000116 F000 F814       BL               WAIT
  239 0000011A F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  240 0000011E E7C4            B                CheckBumpers
  241 00000120         
  242 00000120         
  243 00000120         HalfTurn
  244 00000120 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  245 00000124 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  246 00000128 F000 F80B       BL               WAIT
  247 0000012C F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  248 00000130 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  249 00000134 F000 F805       BL               WAIT
  250 00000138 F000 F803       BL               WAIT
  251 0000013C F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  252 00000140         
  253 00000140 E7B3            B                CheckBumpers
  254 00000142         
  255 00000142         
  256 00000142         ;; Boucle d'attente
  257 00000142         WAIT
  258 00000142 4919            ldr              r1, =0x2BFFFF
  259 00000144         wait1
  260 00000144 3901            subs             r1, #1
  261 00000146 D1FD            bne              wait1
  262 00000148         
  263 00000148         ;; retour à la suite du lien de branchement
  264 00000148 4770            BX               LR
  265 0000014A         
  266 0000014A         
  267 0000014A         ;; Boucle d'attente pour bumper droit
  268 0000014A         waitBumperRight
  269 0000014A 4918            ldr              r1, =0xAFFFF
  270 0000014C         wait2
  271 0000014C F8D8 A000       ldr              r10, [r8]
  272 00000150 F1BA 0F00       CMP              r10, #0x0   ; Check if left and
                                                             right are pushed



ARM Macro Assembler    Page 8 


  273 00000154 D0B2            BEQ              TurnOnLeds
  274 00000156 3901            subs             r1, #1
  275 00000158 D1F8            bne              wait2
  276 0000015A         
  277 0000015A E7B4            B                TurnOnLed1
  278 0000015C         
  279 0000015C         
  280 0000015C         ;; Boucle d'attente pour bumper gauche
  281 0000015C         waitBumperleft
  282 0000015C 4913            ldr              r1, =0xAFFFF
  283 0000015E         wait3
  284 0000015E F8D8 A000       ldr              r10, [r8]
  285 00000162 F1BA 0F00       CMP              r10, #0x0   ; Check if left and
                                                             right are pushed
  286 00000166 D0A9            BEQ              TurnOnLeds
  287 00000168 3901            subs             r1, #1
  288 0000016A D1F8            bne              wait3
  289 0000016C         
  290 0000016C E7B1            B                TurnOnLed2
  291 0000016E         
  292 0000016E         
  293 0000016E         MainProgram1
  294 0000016E E79C            B                CheckBumpers
  295 00000170         
  296 00000170 BF00            nop
  297 00000172                 END
              00 00 400FE108 
              40025400 
              4002551C 
              40025500 
              400250C0 
              40007510 
              4000751C 
              40007300 
              40024510 
              4002451C 
              4002400C 
              40025040 
              40025080 
              002BFFFF 
              000AFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\test.d -o.\objects\test.o -I.\RTE\_Target_1 -I"D:\Progra
m Files\ARM Keil\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Program Files\
ARM Keil\Packs\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include" --predefine="__EVAL S
ETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 528"
 --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\listings\test.
lst test.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file test.s
   Uses
      None
Comment: .text unused
CheckBumpers 000000AA

Symbol: CheckBumpers
   Definitions
      At line 183 in file test.s
   Uses
      At line 219 in file test.s
      At line 229 in file test.s
      At line 240 in file test.s
      At line 253 in file test.s
      At line 294 in file test.s

ChooseProgram 0000005E

Symbol: ChooseProgram
   Definitions
      At line 134 in file test.s
   Uses
      At line 140 in file test.s
Comment: ChooseProgram used once
HalfTurn 00000120

Symbol: HalfTurn
   Definitions
      At line 243 in file test.s
   Uses
      At line 196 in file test.s
Comment: HalfTurn used once
Init 00000070

Symbol: Init
   Definitions
      At line 146 in file test.s
   Uses
      None
Comment: Init unused
LeftDirection 00000102

Symbol: LeftDirection
   Definitions
      At line 232 in file test.s
   Uses
      At line 205 in file test.s
Comment: LeftDirection used once
Main 0000007A

Symbol: Main
   Definitions
      At line 151 in file test.s
   Uses
      At line 149 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 156 in file test.s
      At line 160 in file test.s
      At line 164 in file test.s

MainProgram1 0000016E

Symbol: MainProgram1
   Definitions
      At line 293 in file test.s
   Uses
      At line 181 in file test.s
Comment: MainProgram1 used once
Program1 00000094

Symbol: Program1
   Definitions
      At line 169 in file test.s
   Uses
      At line 137 in file test.s
Comment: Program1 used once
Program2 00000070

Symbol: Program2
   Definitions
      At line 144 in file test.s
   Uses
      At line 139 in file test.s
Comment: Program2 used once
RightDirection 000000E4

Symbol: RightDirection
   Definitions
      At line 221 in file test.s
   Uses
      At line 214 in file test.s
Comment: RightDirection used once
TurnOffLeds 000000DE

Symbol: TurnOffLeds
   Definitions
      At line 216 in file test.s
   Uses
      At line 190 in file test.s
Comment: TurnOffLeds used once
TurnOnLed1 000000C6

Symbol: TurnOnLed1
   Definitions
      At line 198 in file test.s
   Uses
      At line 277 in file test.s
Comment: TurnOnLed1 used once
TurnOnLed2 000000D2

Symbol: TurnOnLed2
   Definitions
      At line 207 in file test.s
   Uses
      At line 290 in file test.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: TurnOnLed2 used once
TurnOnLeds 000000BC

Symbol: TurnOnLeds
   Definitions
      At line 192 in file test.s
   Uses
      At line 273 in file test.s
      At line 286 in file test.s

WAIT 00000142

Symbol: WAIT
   Definitions
      At line 257 in file test.s
   Uses
      At line 224 in file test.s
      At line 227 in file test.s
      At line 235 in file test.s
      At line 238 in file test.s
      At line 246 in file test.s
      At line 249 in file test.s
      At line 250 in file test.s

__main 00000000

Symbol: __main
   Definitions
      At line 65 in file test.s
   Uses
      At line 48 in file test.s
Comment: __main used once
dPlus1 0000008E

Symbol: dPlus1
   Definitions
      At line 162 in file test.s
   Uses
      At line 155 in file test.s
Comment: dPlus1 used once
gPlus1 00000088

Symbol: gPlus1
   Definitions
      At line 158 in file test.s
   Uses
      At line 153 in file test.s
Comment: gPlus1 used once
wait1 00000144

Symbol: wait1
   Definitions
      At line 259 in file test.s
   Uses
      At line 261 in file test.s
Comment: wait1 used once
wait2 0000014C

Symbol: wait2



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 270 in file test.s
   Uses
      At line 275 in file test.s
Comment: wait2 used once
wait3 0000015E

Symbol: wait3
   Definitions
      At line 283 in file test.s
   Uses
      At line 288 in file test.s
Comment: wait3 used once
waitBumperRight 0000014A

Symbol: waitBumperRight
   Definitions
      At line 268 in file test.s
   Uses
      At line 186 in file test.s
Comment: waitBumperRight used once
waitBumperleft 0000015C

Symbol: waitBumperleft
   Definitions
      At line 281 in file test.s
   Uses
      At line 188 in file test.s
Comment: waitBumperleft used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 44 in file test.s
   Uses
      At line 122 in file test.s
      At line 126 in file test.s
      At line 129 in file test.s

BROCHE4 00000010

Symbol: BROCHE4
   Definitions
      At line 34 in file test.s
   Uses
      At line 199 in file test.s
      At line 211 in file test.s
      At line 212 in file test.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 32 in file test.s
   Uses
      At line 83 in file test.s
      At line 87 in file test.s
      At line 91 in file test.s
      At line 97 in file test.s
      At line 99 in file test.s
      At line 193 in file test.s
      At line 194 in file test.s
      At line 217 in file test.s

BROCHE5 00000020

Symbol: BROCHE5
   Definitions
      At line 36 in file test.s
   Uses
      At line 202 in file test.s
      At line 203 in file test.s
      At line 208 in file test.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 40 in file test.s
   Uses
      None
Comment: BROCHE6 unused
BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 38 in file test.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 107 in file test.s
      At line 111 in file test.s
      At line 114 in file test.s

BROCHE7 00000080

Symbol: BROCHE7
   Definitions
      At line 42 in file test.s
   Uses
      None
Comment: BROCHE7 unused
GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 29 in file test.s
   Uses
      At line 106 in file test.s
      At line 121 in file test.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 26 in file test.s
   Uses
      At line 86 in file test.s
      At line 110 in file test.s
      At line 125 in file test.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 18 in file test.s
   Uses
      At line 82 in file test.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 22 in file test.s
   Uses
      At line 90 in file test.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 13 in file test.s
   Uses
      At line 106 in file test.s
      At line 110 in file test.s
      At line 114 in file test.s

GPIO_PORTE_BASE 40024000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 14 in file test.s
   Uses
      At line 121 in file test.s
      At line 125 in file test.s
      At line 129 in file test.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 12 in file test.s
   Uses
      At line 82 in file test.s
      At line 86 in file test.s
      At line 90 in file test.s
      At line 99 in file test.s
      At line 193 in file test.s
      At line 199 in file test.s
      At line 202 in file test.s
      At line 208 in file test.s
      At line 211 in file test.s
      At line 217 in file test.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 9 in file test.s
   Uses
      At line 69 in file test.s
Comment: SYSCTL_PERIPH_GPIO used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 56 in file test.s
   Uses
      At line 222 in file test.s
      At line 225 in file test.s
      At line 233 in file test.s
      At line 244 in file test.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 55 in file test.s
   Uses
      At line 178 in file test.s
      At line 228 in file test.s
      At line 237 in file test.s
      At line 248 in file test.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 57 in file test.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 54 in file test.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 53 in file test.s
   Uses
      At line 174 in file test.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 62 in file test.s
   Uses
      At line 223 in file test.s
      At line 234 in file test.s
      At line 236 in file test.s
      At line 245 in file test.s
      At line 247 in file test.s

MOTEUR_GAUCHE_AVANT 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 61 in file test.s
   Uses
      At line 179 in file test.s
      At line 226 in file test.s
      At line 239 in file test.s
      At line 251 in file test.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 63 in file test.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 60 in file test.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 59 in file test.s
   Uses
      At line 175 in file test.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 51 in file test.s
   Uses
      At line 171 in file test.s
Comment: MOTEUR_INIT used once
11 symbols
387 symbols in table
