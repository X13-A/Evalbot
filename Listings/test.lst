


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY
    2 00000000         
    3 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    4 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
    5 00000000         
    6 00000000         ; The GPIODATA register is the data register
    7 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
    8 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
    9 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   10 00000000         
   11 00000000         ; configure the corresponding pin to be an output
   12 00000000         ; all GPIO pins are inputs by default
   13 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   14 00000000         
   15 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   16 00000000         ; By default, all GPIO pins have 2-mA drive.
   17 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   18 00000000         
   19 00000000         ; Digital enable register
   20 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   21 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   22 00000000         
   23 00000000         ; Pul_up
   24 00000000 00000510 



ARM Macro Assembler    Page 2 


                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   25 00000000         
   26 00000000         ; Broches select
   27 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   28 00000000         
   29 00000000 00000010 
                       BROCHE4 EQU              0x10        ; led1 sur broche 4
                                                            
   30 00000000         
   31 00000000 00000020 
                       BROCHE5 EQU              0x20        ; led2 sur broche 5
                                                            
   32 00000000         
   33 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bouton poussoir 1
                                                             et 2 sur broche 6 
                                                            et 7
   34 00000000         
   35 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                             sur broche 6
   36 00000000         
   37 00000000 00000080 
                       BROCHE7 EQU              0x80        ; bouton poussoir 2
                                                             sur broche 7
   38 00000000         
   39 00000000 00000003 
                       BROCHE0_1
                               EQU              0x03        ; bumpers 1 et 2 su
                                                            r broche 0 et 1
   40 00000000         
   41 00000000         
   42 00000000                 ENTRY
   43 00000000                 EXPORT           __main
   44 00000000         
   45 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   46 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   47 00000000         
   48 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   49 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   50 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   51 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   52 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 



ARM Macro Assembler    Page 3 


                                                            le sens de rotation
                                                             du moteur droit
   53 00000000         
   54 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   55 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   56 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   57 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   58 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   59 00000000         
   60 00000000         __main
   61 00000000         
   62 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   63 00000000         ; ;;         
   64 00000000 4EA1            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   65 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b111
                                                            000)
   66 00000006         ; ;;                              (GPIO::FEDCBA)
   67 00000006 6030            str              r0, [r6]
   68 00000008         
   69 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   70 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   71 0000000A BF00            nop
   72 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   73 0000000E         
   74 0000000E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION 2 LEDs
   75 0000000E         
   76 0000000E 4E9F            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   77 00000010 F04F 0030       ldr              r0, = BROCHE4_5
   78 00000014 6030            str              r0, [r6]
   79 00000016         
   80 00000016 4E9E            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   81 00000018 F04F 0030       ldr              r0, = BROCHE4_5
   82 0000001C 6030            str              r0, [r6]
   83 0000001E         
   84 0000001E 4E9D            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR



ARM Macro Assembler    Page 4 


2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   85 00000020 F04F 0030       ldr              r0, = BROCHE4_5
   86 00000024 6030            str              r0, [r6]
   87 00000026         
   88 00000026 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
   89 0000002A         
   90 0000002A         ; allumer la led broche 4 (BROCHE4_5)
   91 0000002A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
   92 0000002E         
   93 0000002E 4E9A            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
   94 00000030         
   95 00000030         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
   96 00000030         
   97 00000030         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 
   98 00000030         
   99 00000030 4F9A            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  100 00000032 F04F 00C0       ldr              r0, = BROCHE6_7
  101 00000036 6038            str              r0, [r7]
  102 00000038         
  103 00000038 4F99            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  104 0000003A F04F 00C0       ldr              r0, = BROCHE6_7
  105 0000003E 6038            str              r0, [r7]
  106 00000040         
  107 00000040 4F98            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6_7<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  108 00000042         
  109 00000042         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher
  110 00000042         
  111 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper 
  112 00000042         
  113 00000042 F8DF 8264       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  114 00000046 F04F 0003       ldr              r0, = BROCHE0_1
  115 0000004A F8C8 0000       str              r0, [r8]
  116 0000004E         
  117 0000004E F8DF 825C       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  118 00000052 F04F 0003       ldr              r0, = BROCHE0_1



ARM Macro Assembler    Page 5 


  119 00000056 F8C8 0000       str              r0, [r8]
  120 0000005A         
  121 0000005A F8DF 8254       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
0_1<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Bumper
  122 0000005E         
  123 0000005E         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Bumper 
  124 0000005E         
  125 0000005E         ;Boucle permettant de choisir le programme 1 ou 2 en pre
                       ssant le bouton associé
  126 0000005E         ChooseProgram
  127 0000005E F8D7 A000       ldr              r10, [r7]
  128 00000062 F1BA 0F80       CMP              r10, #0x80  ; Check if switch 1
                                                             is pushed
  129 00000066 D003            BEQ              Program1
  130 00000068 F1BA 0F40       CMP              r10, #0x40  ; Check if switch 2
                                                             is pushed
  131 0000006C D06D            BEQ              Program2
  132 0000006E E7F6            B                ChooseProgram
  133 00000070         
  134 00000070         
  135 00000070         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Début programme 1;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;
  136 00000070         
  137 00000070         Program1
  138 00000070 F000 F900       BL               WAIT
  139 00000074 F000 F8FE       BL               WAIT
  140 00000078         ; Configure les PWM + GPIO
  141 00000078 F7FF FFFE       BL               MOTEUR_INIT
  142 0000007C         
  143 0000007C         ; Activer les deux moteurs droit et gauche
  144 0000007C F7FF FFFE       BL               MOTEUR_DROIT_ON
  145 00000080 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  146 00000084         
  147 00000084         ; Evalbot avance droit devant
  148 00000084 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  149 00000088 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  150 0000008C         
  151 0000008C E7FF            B                CheckBumpers
  152 0000008E         
  153 0000008E         CheckBumpers
  154 0000008E F8D8 A000       ldr              r10, [r8]
  155 00000092 F1BA 0F02       CMP              r10, #0x02  ; Check if right on
                                                            e is pushed
  156 00000096 D046            BEQ              waitBumperRight
  157 00000098 F1BA 0F01       CMP              r10, #0x01  ; check if left one
                                                             is pushed
  158 0000009C D04C            BEQ              waitBumperleft
  159 0000009E         
  160 0000009E E010            B                TurnOffLeds ; if none, turn off
                                                             leds
  161 000000A0         
  162 000000A0         TurnOnLeds
  163 000000A0 4E7D            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  164 000000A2 F04F 0330       ldr              r3, = BROCHE4_5
  165 000000A6 6033            str              r3, [r6]



ARM Macro Assembler    Page 6 


  166 000000A8 E02C            B                HalfTurn
  167 000000AA         
  168 000000AA         TurnOnLed1
  169 000000AA 4E82            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4<<2)
  170 000000AC         ;str r2, [r6] ; Turns off Led 1
  171 000000AC         
  172 000000AC 4E82            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
5<<2)
  173 000000AE F04F 0320       ldr              r3, = BROCHE5
  174 000000B2 6033            str              r3, [r6]
  175 000000B4 E017            B                LeftDirection
  176 000000B6         
  177 000000B6         TurnOnLed2
  178 000000B6 4E80            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
5<<2)
  179 000000B8         ;str r2, [r6] ; Turns off Led 2
  180 000000B8         
  181 000000B8 4E7E            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4<<2)
  182 000000BA F04F 0310       ldr              r3, = BROCHE4 ; Turns on Led 1
  183 000000BE 6033            str              r3, [r6]
  184 000000C0 E002            B                RightDirection
  185 000000C2         
  186 000000C2         TurnOffLeds
  187 000000C2 4E75            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  188 000000C4 6032            str              r2, [r6]
  189 000000C6 E7E2            B                CheckBumpers
  190 000000C8         
  191 000000C8         RightDirection
  192 000000C8 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  193 000000CC F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  194 000000D0 F000 F8D0       BL               WAIT
  195 000000D4 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ; MOTEUR_D
                                                            ROIT_INVERSE
  196 000000D8 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  197 000000DC F000 F8CA       BL               WAIT
  198 000000E0 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  199 000000E4 E7D3            B                CheckBumpers
  200 000000E6         
  201 000000E6         LeftDirection
  202 000000E6 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  203 000000EA F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  204 000000EE F000 F8C1       BL               WAIT
  205 000000F2 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  206 000000F6 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  207 000000FA F000 F8BB       BL               WAIT
  208 000000FE F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  209 00000102 E7C4            B                CheckBumpers
  210 00000104         
  211 00000104         HalfTurn
  212 00000104 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  213 00000108 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  214 0000010C F000 F8B2       BL               WAIT
  215 00000110 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  216 00000114 F7FF FFFE       BL               MOTEUR_DROIT_AVANT



ARM Macro Assembler    Page 7 


  217 00000118 F000 F8AC       BL               WAIT
  218 0000011C F000 F8AA       BL               WAIT
  219 00000120 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  220 00000124         
  221 00000124 E7B3            B                CheckBumpers
  222 00000126         
  223 00000126         ;; Boucle d'attente pour bumper droit
  224 00000126         waitBumperRight
  225 00000126 4965            ldr              r1, =0x2BFFF
  226 00000128         wait2
  227 00000128 F8D8 A000       ldr              r10, [r8]
  228 0000012C F1BA 0F00       CMP              r10, #0x0   ; Check if left and
                                                             right are pushed
  229 00000130 D0B6            BEQ              TurnOnLeds
  230 00000132 3901            subs             r1, #1
  231 00000134 D1F8            bne              wait2
  232 00000136         
  233 00000136 E7B8            B                TurnOnLed1
  234 00000138         
  235 00000138         
  236 00000138         ;; Boucle d'attente pour bumper gauche
  237 00000138         waitBumperleft
  238 00000138 4960            ldr              r1, =0x2BFFF
  239 0000013A         wait3
  240 0000013A F8D8 A000       ldr              r10, [r8]
  241 0000013E F1BA 0F00       CMP              r10, #0x0   ; Check if left and
                                                             right are pushed
  242 00000142 D0AD            BEQ              TurnOnLeds
  243 00000144 3901            subs             r1, #1
  244 00000146 D1F8            bne              wait3
  245 00000148         
  246 00000148 E7B5            B                TurnOnLed2
  247 0000014A         
  248 0000014A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Fin programme 1;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;
  249 0000014A         
  250 0000014A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Début programme 2;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;
  251 0000014A         
  252 0000014A         Program2
  253 0000014A E067            B                Init
  254 0000014C         
  255 0000014C         StartCycle
  256 0000014C F000 F892       BL               WAIT
  257 00000150         
  258 00000150         ; Activer les deux moteurs droit et gauche
  259 00000150 F7FF FFFE       BL               MOTEUR_DROIT_ON
  260 00000154 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  261 00000158         
  262 00000158 F004 0901       AND              r9, r4, #0x1
  263 0000015C 2D00            CMP              r5, #0x0
  264 0000015E F000 808D       BEQ.W            EndProgram
  265 00000162 F1A5 0501       SUB              r5, #1
  266 00000166 F000 F864       BL               Motors
  267 0000016A         
  268 0000016A F004 0902       AND              r9, r4, #0x2
  269 0000016E 2D00            CMP              r5, #0x0
  270 00000170 F000 8084       BEQ.W            EndProgram
  271 00000174 F1A5 0501       SUB              r5, #1



ARM Macro Assembler    Page 8 


  272 00000178 F000 F85B       BL               Motors
  273 0000017C         
  274 0000017C F004 0904       AND              r9, r4, #0x4
  275 00000180 2D00            CMP              r5, #0x0
  276 00000182 F000 807B       BEQ.W            EndProgram
  277 00000186 F1A5 0501       SUB              r5, #1
  278 0000018A F000 F852       BL               Motors
  279 0000018E         
  280 0000018E F004 0908       AND              r9, r4, #0x8
  281 00000192 2D00            CMP              r5, #0x0
  282 00000194 D072            BEQ              EndProgram
  283 00000196 F1A5 0501       SUB              r5, #1
  284 0000019A F000 F84A       BL               Motors
  285 0000019E         
  286 0000019E F004 0910       AND              r9, r4, #0x10
  287 000001A2 2D00            CMP              r5, #0x0
  288 000001A4 D06A            BEQ              EndProgram
  289 000001A6 F1A5 0501       SUB              r5, #1
  290 000001AA F000 F842       BL               Motors
  291 000001AE         
  292 000001AE F004 0920       AND              r9, r4, #0x20
  293 000001B2 2D00            CMP              r5, #0x0
  294 000001B4 D062            BEQ              EndProgram
  295 000001B6 F1A5 0501       SUB              r5, #1
  296 000001BA F000 F83A       BL               Motors
  297 000001BE         
  298 000001BE F004 0940       AND              r9, r4, #0x40
  299 000001C2 2D00            CMP              r5, #0x0
  300 000001C4 D05A            BEQ              EndProgram
  301 000001C6 F1A5 0501       SUB              r5, #1
  302 000001CA F000 F832       BL               Motors
  303 000001CE         
  304 000001CE F004 0980       AND              r9, r4, #0x80
  305 000001D2 2D00            CMP              r5, #0x0
  306 000001D4 D052            BEQ              EndProgram
  307 000001D6 F1A5 0501       SUB              r5, #1
  308 000001DA F000 F82A       BL               Motors
  309 000001DE         
  310 000001DE E04D            B                EndProgram
  311 000001E0         
  312 000001E0         AddLeft
  313 000001E0 F105 0501       ADD              r5, #1
  314 000001E4 EA4F 0444       LSL              r4, r4, #1
  315 000001E8 F104 0401       ADD              r4, #1
  316 000001EC F000 F842       BL               WAIT
  317 000001F0 E006            B                Input
  318 000001F2         
  319 000001F2         AddRight
  320 000001F2 F105 0501       ADD              r5, #1
  321 000001F6 EA4F 0444       LSL              r4, r4, #1
  322 000001FA F000 F83B       BL               WAIT
  323 000001FE E7FF            B                Input
  324 00000200         
  325 00000200         Input                                ; Enregistrement de
                                                            s directions lues p
                                                            ar les bumpers
  326 00000200 F8D8 A000       ldr              r10, [r8]
  327 00000204 F8D7 B000       ldr              r11, [r7]
  328 00000208 F1BA 0F02       CMP              r10, #0x02  ; Check if right on



ARM Macro Assembler    Page 9 


                                                            e is pushed
  329 0000020C D0F1            BEQ              AddRight
  330 0000020E F1BA 0F01       CMP              r10, #0x01  ; check if left one
                                                             is pushed
  331 00000212 D0E5            BEQ              AddLeft
  332 00000214 F1BB 0FC0       CMP              r11, #0xC0  ; Check if switch 1
                                                             is pushed
  333 00000218 D198            BNE              StartCycle
  334 0000021A         
  335 0000021A E7F1            B                Input
  336 0000021C         
  337 0000021C         Init
  338 0000021C F04F 0400       ldr              r4, =0x0    ; Directions
  339 00000220 F04F 0500       ldr              r5, =0x0    ; Compteur
  340 00000224 F04F 0900       ldr              r9, =0x0    ; Pour copier R4 da
                                                            ns R9
  341 00000228         
  342 00000228         ; Configure les PWM + GPIO
  343 00000228 F7FF FFFE       BL               MOTEUR_INIT
  344 0000022C F000 F822       BL               WAIT
  345 00000230         
  346 00000230 E7E6            B                Input
  347 00000232         
  348 00000232         Motors
  349 00000232         ; Evalbot avance droit devant
  350 00000232 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  351 00000236 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  352 0000023A F000 F81B       BL               WAIT
  353 0000023E F000 F819       BL               WAIT
  354 00000242         
  355 00000242 F1B9 0F00       CMP              r9, #0x0
  356 00000246 D10A            BNE              TurnLeft
  357 00000248         
  358 00000248         TurnRight
  359 00000248         ;ADD r2, #1
  360 00000248         
  361 00000248 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  362 0000024C F000 F812       BL               WAIT
  363 00000250 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  364 00000254 F000 F80E       BL               WAIT
  365 00000258         
  366 00000258 F04F 0900       ldr              r9, =0x0
  367 0000025C         
  368 0000025C 4770            BX               LR
  369 0000025E         
  370 0000025E         TurnLeft
  371 0000025E         ;ADD r2, #2
  372 0000025E         
  373 0000025E F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  374 00000262 F000 F807       BL               WAIT
  375 00000266 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  376 0000026A F000 F803       BL               WAIT
  377 0000026E         
  378 0000026E F04F 0900       ldr              r9, =0x0
  379 00000272         
  380 00000272 4770            BX               LR
  381 00000274         
  382 00000274         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Fin programme 2;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;



ARM Macro Assembler    Page 10 


  383 00000274         
  384 00000274         ;; Boucle d'attente
  385 00000274         WAIT
  386 00000274 4912            ldr              r1, =0x2BFFFF
  387 00000276         wait1
  388 00000276 3901            subs             r1, #1
  389 00000278 D1FD            bne              wait1
  390 0000027A         
  391 0000027A         ;; retour à la suite du lien de branchement
  392 0000027A 4770            BX               LR
  393 0000027C         
  394 0000027C         EndProgram
  395 0000027C F7FF FFFE       BL               MOTEUR_DROIT_OFF
  396 00000280 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  397 00000284         
  398 00000284 BF00            nop
  399 00000286                 END
              00 00 400FE108 
              40025400 
              4002551C 
              40025500 
              400250C0 
              40007510 
              4000751C 
              40007300 
              40024510 
              4002451C 
              4002400C 
              40025040 
              40025080 
              0002BFFF 
              002BFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\test.d -o.\objects\test.o -I.\RTE\_Target_1 -I"D:\Progra
m Files\ARM Keil\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Program Files\
ARM Keil\Packs\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include" --predefine="__EVAL S
ETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 528"
 --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\listings\test.
lst test.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file test.s
   Uses
      None
Comment: .text unused
AddLeft 000001E0

Symbol: AddLeft
   Definitions
      At line 312 in file test.s
   Uses
      At line 331 in file test.s
Comment: AddLeft used once
AddRight 000001F2

Symbol: AddRight
   Definitions
      At line 319 in file test.s
   Uses
      At line 329 in file test.s
Comment: AddRight used once
CheckBumpers 0000008E

Symbol: CheckBumpers
   Definitions
      At line 153 in file test.s
   Uses
      At line 151 in file test.s
      At line 189 in file test.s
      At line 199 in file test.s
      At line 209 in file test.s
      At line 221 in file test.s

ChooseProgram 0000005E

Symbol: ChooseProgram
   Definitions
      At line 126 in file test.s
   Uses
      At line 132 in file test.s
Comment: ChooseProgram used once
EndProgram 0000027C

Symbol: EndProgram
   Definitions
      At line 394 in file test.s
   Uses
      At line 264 in file test.s
      At line 270 in file test.s
      At line 276 in file test.s
      At line 282 in file test.s
      At line 288 in file test.s
      At line 294 in file test.s
      At line 300 in file test.s
      At line 306 in file test.s
      At line 310 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


HalfTurn 00000104

Symbol: HalfTurn
   Definitions
      At line 211 in file test.s
   Uses
      At line 166 in file test.s
Comment: HalfTurn used once
Init 0000021C

Symbol: Init
   Definitions
      At line 337 in file test.s
   Uses
      At line 253 in file test.s
Comment: Init used once
Input 00000200

Symbol: Input
   Definitions
      At line 325 in file test.s
   Uses
      At line 317 in file test.s
      At line 323 in file test.s
      At line 335 in file test.s
      At line 346 in file test.s

LeftDirection 000000E6

Symbol: LeftDirection
   Definitions
      At line 201 in file test.s
   Uses
      At line 175 in file test.s
Comment: LeftDirection used once
Motors 00000232

Symbol: Motors
   Definitions
      At line 348 in file test.s
   Uses
      At line 266 in file test.s
      At line 272 in file test.s
      At line 278 in file test.s
      At line 284 in file test.s
      At line 290 in file test.s
      At line 296 in file test.s
      At line 302 in file test.s
      At line 308 in file test.s

Program1 00000070

Symbol: Program1
   Definitions
      At line 137 in file test.s
   Uses
      At line 129 in file test.s
Comment: Program1 used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Program2 0000014A

Symbol: Program2
   Definitions
      At line 252 in file test.s
   Uses
      At line 131 in file test.s
Comment: Program2 used once
RightDirection 000000C8

Symbol: RightDirection
   Definitions
      At line 191 in file test.s
   Uses
      At line 184 in file test.s
Comment: RightDirection used once
StartCycle 0000014C

Symbol: StartCycle
   Definitions
      At line 255 in file test.s
   Uses
      At line 333 in file test.s
Comment: StartCycle used once
TurnLeft 0000025E

Symbol: TurnLeft
   Definitions
      At line 370 in file test.s
   Uses
      At line 356 in file test.s
Comment: TurnLeft used once
TurnOffLeds 000000C2

Symbol: TurnOffLeds
   Definitions
      At line 186 in file test.s
   Uses
      At line 160 in file test.s
Comment: TurnOffLeds used once
TurnOnLed1 000000AA

Symbol: TurnOnLed1
   Definitions
      At line 168 in file test.s
   Uses
      At line 233 in file test.s
Comment: TurnOnLed1 used once
TurnOnLed2 000000B6

Symbol: TurnOnLed2
   Definitions
      At line 177 in file test.s
   Uses
      At line 246 in file test.s
Comment: TurnOnLed2 used once
TurnOnLeds 000000A0

Symbol: TurnOnLeds



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 162 in file test.s
   Uses
      At line 229 in file test.s
      At line 242 in file test.s

TurnRight 00000248

Symbol: TurnRight
   Definitions
      At line 358 in file test.s
   Uses
      None
Comment: TurnRight unused
WAIT 00000274

Symbol: WAIT
   Definitions
      At line 385 in file test.s
   Uses
      At line 138 in file test.s
      At line 139 in file test.s
      At line 194 in file test.s
      At line 197 in file test.s
      At line 204 in file test.s
      At line 207 in file test.s
      At line 214 in file test.s
      At line 217 in file test.s
      At line 218 in file test.s
      At line 256 in file test.s
      At line 316 in file test.s
      At line 322 in file test.s
      At line 344 in file test.s
      At line 352 in file test.s
      At line 353 in file test.s
      At line 362 in file test.s
      At line 364 in file test.s
      At line 374 in file test.s
      At line 376 in file test.s

__main 00000000

Symbol: __main
   Definitions
      At line 60 in file test.s
   Uses
      At line 43 in file test.s
Comment: __main used once
wait1 00000276

Symbol: wait1
   Definitions
      At line 387 in file test.s
   Uses
      At line 389 in file test.s
Comment: wait1 used once
wait2 00000128

Symbol: wait2



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 226 in file test.s
   Uses
      At line 231 in file test.s
Comment: wait2 used once
wait3 0000013A

Symbol: wait3
   Definitions
      At line 239 in file test.s
   Uses
      At line 244 in file test.s
Comment: wait3 used once
waitBumperRight 00000126

Symbol: waitBumperRight
   Definitions
      At line 224 in file test.s
   Uses
      At line 156 in file test.s
Comment: waitBumperRight used once
waitBumperleft 00000138

Symbol: waitBumperleft
   Definitions
      At line 237 in file test.s
   Uses
      At line 158 in file test.s
Comment: waitBumperleft used once
28 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 39 in file test.s
   Uses
      At line 114 in file test.s
      At line 118 in file test.s
      At line 121 in file test.s

BROCHE4 00000010

Symbol: BROCHE4
   Definitions
      At line 29 in file test.s
   Uses
      At line 169 in file test.s
      At line 181 in file test.s
      At line 182 in file test.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 27 in file test.s
   Uses
      At line 77 in file test.s
      At line 81 in file test.s
      At line 85 in file test.s
      At line 91 in file test.s
      At line 93 in file test.s
      At line 163 in file test.s
      At line 164 in file test.s
      At line 187 in file test.s

BROCHE5 00000020

Symbol: BROCHE5
   Definitions
      At line 31 in file test.s
   Uses
      At line 172 in file test.s
      At line 173 in file test.s
      At line 178 in file test.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 35 in file test.s
   Uses
      None
Comment: BROCHE6 unused
BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 33 in file test.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 100 in file test.s
      At line 104 in file test.s
      At line 107 in file test.s

BROCHE7 00000080

Symbol: BROCHE7
   Definitions
      At line 37 in file test.s
   Uses
      None
Comment: BROCHE7 unused
GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 24 in file test.s
   Uses
      At line 99 in file test.s
      At line 113 in file test.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 21 in file test.s
   Uses
      At line 80 in file test.s
      At line 103 in file test.s
      At line 117 in file test.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 13 in file test.s
   Uses
      At line 76 in file test.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 17 in file test.s
   Uses
      At line 84 in file test.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 8 in file test.s
   Uses
      At line 99 in file test.s
      At line 103 in file test.s
      At line 107 in file test.s

GPIO_PORTE_BASE 40024000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 9 in file test.s
   Uses
      At line 113 in file test.s
      At line 117 in file test.s
      At line 121 in file test.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 7 in file test.s
   Uses
      At line 76 in file test.s
      At line 80 in file test.s
      At line 84 in file test.s
      At line 93 in file test.s
      At line 163 in file test.s
      At line 169 in file test.s
      At line 172 in file test.s
      At line 178 in file test.s
      At line 181 in file test.s
      At line 187 in file test.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 4 in file test.s
   Uses
      At line 64 in file test.s
Comment: SYSCTL_PERIPH_GPIO used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 51 in file test.s
   Uses
      At line 192 in file test.s
      At line 195 in file test.s
      At line 202 in file test.s
      At line 212 in file test.s
      At line 361 in file test.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 50 in file test.s
   Uses
      At line 148 in file test.s
      At line 198 in file test.s
      At line 206 in file test.s
      At line 216 in file test.s
      At line 350 in file test.s
      At line 363 in file test.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 52 in file test.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 49 in file test.s
   Uses
      At line 395 in file test.s
Comment: MOTEUR_DROIT_OFF used once
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 48 in file test.s
   Uses
      At line 144 in file test.s
      At line 259 in file test.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 57 in file test.s
   Uses
      At line 193 in file test.s
      At line 203 in file test.s
      At line 205 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 213 in file test.s
      At line 215 in file test.s
      At line 373 in file test.s

MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 56 in file test.s
   Uses
      At line 149 in file test.s
      At line 196 in file test.s
      At line 208 in file test.s
      At line 219 in file test.s
      At line 351 in file test.s
      At line 375 in file test.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 58 in file test.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 55 in file test.s
   Uses
      At line 396 in file test.s
Comment: MOTEUR_GAUCHE_OFF used once
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 54 in file test.s
   Uses
      At line 145 in file test.s
      At line 260 in file test.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 46 in file test.s
   Uses
      At line 141 in file test.s
      At line 343 in file test.s

11 symbols
391 symbols in table
