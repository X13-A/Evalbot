


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ;; Les deux LEDs sont initialement allumées
    3 00000000         ;; Ce programme lis l'état du bouton poussoir 1 connecté
                       e au port GPIOD broche 6
    4 00000000         ;; Si bouton poussoir fermé ==> fait clignoter les deux 
                       LED1&2 connectée au port GPIOF broches 4&5.
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    9 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   10 00000000         
   11 00000000         ; The GPIODATA register is the data register
   12 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   13 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   14 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   15 00000000         
   16 00000000         ; configure the corresponding pin to be an output
   17 00000000         ; all GPIO pins are inputs by default
   18 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   19 00000000         
   20 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   21 00000000         ; By default, all GPIO pins have 2-mA drive.
   22 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   23 00000000         
   24 00000000         ; Digital enable register
   25 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   26 00000000 0000051C 



ARM Macro Assembler    Page 2 


                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   27 00000000         
   28 00000000         ; Pul_up
   29 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   30 00000000         
   31 00000000         ; Broches select
   32 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   33 00000000         
   34 00000000 00000010 
                       BROCHE4 EQU              0x10        ; led1 sur broche 4
                                                            
   35 00000000         
   36 00000000 00000020 
                       BROCHE5 EQU              0x20        ; led2 sur broche 5
                                                            
   37 00000000         
   38 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bouton poussoir 1
                                                             et 2 sur broche 6 
                                                            et 7
   39 00000000         
   40 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                             sur broche 6
   41 00000000         
   42 00000000 00000080 
                       BROCHE7 EQU              0x80        ; bouton poussoir 2
                                                             sur broche 7
   43 00000000         
   44 00000000 00000003 
                       BROCHE0_1
                               EQU              0x03        ; bumpers 1 et 2 su
                                                            r broche 0 et 1
   45 00000000         
   46 00000000         
   47 00000000                 ENTRY
   48 00000000                 EXPORT           __main
   49 00000000         
   50 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   51 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   52 00000000         
   53 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   54 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit



ARM Macro Assembler    Page 3 


   55 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   56 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   57 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   58 00000000         
   59 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   60 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   61 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   62 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   63 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   64 00000000         
   65 00000000         __main
   66 00000000         
   67 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   68 00000000         ; ;;         
   69 00000000 4E62            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   70 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b111
                                                            000)
   71 00000006         ; ;;                              (GPIO::FEDCBA)
   72 00000006 6030            str              r0, [r6]
   73 00000008         
   74 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   75 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   76 0000000A BF00            nop
   77 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   78 0000000E         
   79 0000000E         
   80 0000000E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION 2 LEDs
   81 0000000E         
   82 0000000E 4E60            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   83 00000010 F04F 0030       ldr              r0, = BROCHE4_5
   84 00000014 6030            str              r0, [r6]
   85 00000016         



ARM Macro Assembler    Page 4 


   86 00000016 4E5F            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   87 00000018 F04F 0030       ldr              r0, = BROCHE4_5
   88 0000001C 6030            str              r0, [r6]
   89 0000001E         
   90 0000001E 4E5E            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   91 00000020 F04F 0030       ldr              r0, = BROCHE4_5
   92 00000024 6030            str              r0, [r6]
   93 00000026         
   94 00000026 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
   95 0000002A         
   96 0000002A         ; allumer la led broche 4 (BROCHE4_5)
   97 0000002A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
   98 0000002E         
   99 0000002E 4E5B            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  100 00000030         
  101 00000030         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
  102 00000030         
  103 00000030         
  104 00000030         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 
  105 00000030         
  106 00000030 4F5B            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  107 00000032 F04F 00C0       ldr              r0, = BROCHE6_7
  108 00000036 6038            str              r0, [r7]
  109 00000038         
  110 00000038 4F5A            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  111 0000003A F04F 00C0       ldr              r0, = BROCHE6_7
  112 0000003E 6038            str              r0, [r7]
  113 00000040         
  114 00000040 4F59            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6_7<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  115 00000042         
  116 00000042         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher
  117 00000042         
  118 00000042         
  119 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper 
  120 00000042         
  121 00000042 F8DF 8168       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU



ARM Macro Assembler    Page 5 


R 
                                                            ;; Pul_up 
  122 00000046 F04F 0003       ldr              r0, = BROCHE0_1
  123 0000004A F8C8 0000       str              r0, [r8]
  124 0000004E         
  125 0000004E F8DF 8160       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  126 00000052 F04F 0003       ldr              r0, = BROCHE0_1
  127 00000056 F8C8 0000       str              r0, [r8]
  128 0000005A         
  129 0000005A F8DF 8158       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
0_1<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Bumper
  130 0000005E         
  131 0000005E         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Bumper 
  132 0000005E         
  133 0000005E         
  134 0000005E         ChooseProgram
  135 0000005E F8D7 A000       ldr              r10, [r7]
  136 00000062 F1BA 0F40       CMP              r10, #0x40  ; Check if switch 1
                                                             is pushed
  137 00000066 D022            BEQ              Program1
  138 00000068 F1BA 0F80       CMP              r10, #0x80  ; Check if switch 2
                                                             is pushed
  139 0000006C D000            BEQ              Program2
  140 0000006E E7F6            B                ChooseProgram
  141 00000070         
  142 00000070         
  143 00000070         
  144 00000070         Program2
  145 00000070 E018            B                Init
  146 00000072         
  147 00000072         AddLeft
  148 00000072 F105 0501       ADD              r5, #1
  149 00000076 EA4F 0444       LSL              r4, r4, #1
  150 0000007A F104 0401       ADD              r4, #1
  151 0000007E F000 F86D       BL               WAIT
  152 00000082 E006            B                Input
  153 00000084         
  154 00000084         AddRight
  155 00000084 F105 0501       ADD              r5, #1
  156 00000088 EA4F 0444       LSL              r4, r4, #1
  157 0000008C F000 F866       BL               WAIT
  158 00000090 E7FF            B                Input
  159 00000092         
  160 00000092         Input                                ; Enregistrement de
                                                            s directions lues p
                                                            ar les bumpers
  161 00000092 F8D8 A000       ldr              r10, [r8]
  162 00000096 F1BA 0F02       CMP              r10, #0x02  ; Check if right on
                                                            e is pushed
  163 0000009A D0F3            BEQ              AddRight
  164 0000009C F1BA 0F01       CMP              r10, #0x01  ; check if left one
                                                             is pushed
  165 000000A0 D0E7            BEQ              AddLeft



ARM Macro Assembler    Page 6 


  166 000000A2         
  167 000000A2 E7F6            B                Input
  168 000000A4         
  169 000000A4         Init
  170 000000A4 F04F 0400       ldr              r4, =0x0    ; Directions
  171 000000A8 F04F 0500       ldr              r5, =0x0    ; Compteur
  172 000000AC         
  173 000000AC         Main
  174 000000AC E7F1            B                Input
  175 000000AE         
  176 000000AE         Program1
  177 000000AE         ; Configure les PWM + GPIO
  178 000000AE F7FF FFFE       BL               MOTEUR_INIT
  179 000000B2         
  180 000000B2         ; Activer les deux moteurs droit et gauche
  181 000000B2 F7FF FFFE       BL               MOTEUR_DROIT_ON
  182 000000B6 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  183 000000BA         
  184 000000BA         ; Evalbot avance droit devant
  185 000000BA F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  186 000000BE F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  187 000000C2         
  188 000000C2 E061            B                MainProgram1
  189 000000C4         
  190 000000C4         CheckBumpers
  191 000000C4 F8D8 A000       ldr              r10, [r8]
  192 000000C8 F1BA 0F02       CMP              r10, #0x02  ; Check if right on
                                                            e is pushed
  193 000000CC D04A            BEQ              waitBumperRight
  194 000000CE F1BA 0F01       CMP              r10, #0x01  ; check if left one
                                                             is pushed
  195 000000D2 D050            BEQ              waitBumperleft
  196 000000D4         
  197 000000D4 E010            B                TurnOffLeds ; if none, turn off
                                                             leds
  198 000000D6         
  199 000000D6         TurnOnLeds
  200 000000D6 4E31            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  201 000000D8 F04F 0330       ldr              r3, = BROCHE4_5
  202 000000DC 6033            str              r3, [r6]
  203 000000DE E02C            B                HalfTurn
  204 000000E0         
  205 000000E0         TurnOnLed1
  206 000000E0 4E35            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4<<2)
  207 000000E2         ;str r2, [r6] ; Turns off Led 1
  208 000000E2         
  209 000000E2 4E36            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
5<<2)
  210 000000E4 F04F 0320       ldr              r3, = BROCHE5
  211 000000E8 6033            str              r3, [r6]
  212 000000EA E017            B                LeftDirection
  213 000000EC         
  214 000000EC         TurnOnLed2
  215 000000EC 4E33            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
5<<2)
  216 000000EE         ;str r2, [r6] ; Turns off Led 2
  217 000000EE         



ARM Macro Assembler    Page 7 


  218 000000EE 4E32            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4<<2)
  219 000000F0 F04F 0310       ldr              r3, = BROCHE4 ; Turns on Led 1
  220 000000F4 6033            str              r3, [r6]
  221 000000F6 E002            B                RightDirection
  222 000000F8         
  223 000000F8         TurnOffLeds
  224 000000F8 4E28            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  225 000000FA 6032            str              r2, [r6]
  226 000000FC E7E2            B                CheckBumpers
  227 000000FE         
  228 000000FE         RightDirection
  229 000000FE F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  230 00000102 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  231 00000106 F000 F829       BL               WAIT
  232 0000010A F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ; MOTEUR_D
                                                            ROIT_INVERSE
  233 0000010E F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  234 00000112 F000 F823       BL               WAIT
  235 00000116 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  236 0000011A E7D3            B                CheckBumpers
  237 0000011C         
  238 0000011C         
  239 0000011C         LeftDirection
  240 0000011C F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  241 00000120 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  242 00000124 F000 F81A       BL               WAIT
  243 00000128 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  244 0000012C F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  245 00000130 F000 F814       BL               WAIT
  246 00000134 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  247 00000138 E7C4            B                CheckBumpers
  248 0000013A         
  249 0000013A         
  250 0000013A         HalfTurn
  251 0000013A F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  252 0000013E F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  253 00000142 F000 F80B       BL               WAIT
  254 00000146 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  255 0000014A F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  256 0000014E F000 F805       BL               WAIT
  257 00000152 F000 F803       BL               WAIT
  258 00000156 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  259 0000015A         
  260 0000015A E7B3            B                CheckBumpers
  261 0000015C         
  262 0000015C         
  263 0000015C         ;; Boucle d'attente
  264 0000015C         WAIT
  265 0000015C 4918            ldr              r1, =0x2BFFFF
  266 0000015E         wait1
  267 0000015E 3901            subs             r1, #1
  268 00000160 D1FD            bne              wait1
  269 00000162         
  270 00000162         ;; retour à la suite du lien de branchement
  271 00000162 4770            BX               LR



ARM Macro Assembler    Page 8 


  272 00000164         
  273 00000164         
  274 00000164         ;; Boucle d'attente pour bumper droit
  275 00000164         waitBumperRight
  276 00000164 4917            ldr              r1, =0xAFFFF
  277 00000166         wait2
  278 00000166 F8D8 A000       ldr              r10, [r8]
  279 0000016A F1BA 0F00       CMP              r10, #0x0   ; Check if left and
                                                             right are pushed
  280 0000016E D0B2            BEQ              TurnOnLeds
  281 00000170 3901            subs             r1, #1
  282 00000172 D1F8            bne              wait2
  283 00000174         
  284 00000174 E7B4            B                TurnOnLed1
  285 00000176         
  286 00000176         
  287 00000176         ;; Boucle d'attente pour bumper gauche
  288 00000176         waitBumperleft
  289 00000176 4913            ldr              r1, =0xAFFFF
  290 00000178         wait3
  291 00000178 F8D8 A000       ldr              r10, [r8]
  292 0000017C F1BA 0F00       CMP              r10, #0x0   ; Check if left and
                                                             right are pushed
  293 00000180 D0A9            BEQ              TurnOnLeds
  294 00000182 3901            subs             r1, #1
  295 00000184 D1F8            bne              wait3
  296 00000186         
  297 00000186 E7B1            B                TurnOnLed2
  298 00000188         
  299 00000188         
  300 00000188         MainProgram1
  301 00000188 E79C            B                CheckBumpers
  302 0000018A         
  303 0000018A BF00            nop
  304 0000018C                 END
              400FE108 
              40025400 
              4002551C 
              40025500 
              400250C0 
              40007510 
              4000751C 
              40007300 
              40024510 
              4002451C 
              4002400C 
              40025040 
              40025080 
              002BFFFF 
              000AFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\test.d -o.\objects\test.o -I.\RTE\_Target_1 -IC:\Users\f
oulo\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\foul
o\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM3\Include --predefine
="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION
 SETA 528" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\list
ings\test.lst test.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file test.s
   Uses
      None
Comment: .text unused
AddLeft 00000072

Symbol: AddLeft
   Definitions
      At line 147 in file test.s
   Uses
      At line 165 in file test.s
Comment: AddLeft used once
AddRight 00000084

Symbol: AddRight
   Definitions
      At line 154 in file test.s
   Uses
      At line 163 in file test.s
Comment: AddRight used once
CheckBumpers 000000C4

Symbol: CheckBumpers
   Definitions
      At line 190 in file test.s
   Uses
      At line 226 in file test.s
      At line 236 in file test.s
      At line 247 in file test.s
      At line 260 in file test.s
      At line 301 in file test.s

ChooseProgram 0000005E

Symbol: ChooseProgram
   Definitions
      At line 134 in file test.s
   Uses
      At line 140 in file test.s
Comment: ChooseProgram used once
HalfTurn 0000013A

Symbol: HalfTurn
   Definitions
      At line 250 in file test.s
   Uses
      At line 203 in file test.s
Comment: HalfTurn used once
Init 000000A4

Symbol: Init
   Definitions
      At line 169 in file test.s
   Uses
      At line 145 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: Init used once
Input 00000092

Symbol: Input
   Definitions
      At line 160 in file test.s
   Uses
      At line 152 in file test.s
      At line 158 in file test.s
      At line 167 in file test.s
      At line 174 in file test.s

LeftDirection 0000011C

Symbol: LeftDirection
   Definitions
      At line 239 in file test.s
   Uses
      At line 212 in file test.s
Comment: LeftDirection used once
Main 000000AC

Symbol: Main
   Definitions
      At line 173 in file test.s
   Uses
      None
Comment: Main unused
MainProgram1 00000188

Symbol: MainProgram1
   Definitions
      At line 300 in file test.s
   Uses
      At line 188 in file test.s
Comment: MainProgram1 used once
Program1 000000AE

Symbol: Program1
   Definitions
      At line 176 in file test.s
   Uses
      At line 137 in file test.s
Comment: Program1 used once
Program2 00000070

Symbol: Program2
   Definitions
      At line 144 in file test.s
   Uses
      At line 139 in file test.s
Comment: Program2 used once
RightDirection 000000FE

Symbol: RightDirection
   Definitions
      At line 228 in file test.s
   Uses
      At line 221 in file test.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: RightDirection used once
TurnOffLeds 000000F8

Symbol: TurnOffLeds
   Definitions
      At line 223 in file test.s
   Uses
      At line 197 in file test.s
Comment: TurnOffLeds used once
TurnOnLed1 000000E0

Symbol: TurnOnLed1
   Definitions
      At line 205 in file test.s
   Uses
      At line 284 in file test.s
Comment: TurnOnLed1 used once
TurnOnLed2 000000EC

Symbol: TurnOnLed2
   Definitions
      At line 214 in file test.s
   Uses
      At line 297 in file test.s
Comment: TurnOnLed2 used once
TurnOnLeds 000000D6

Symbol: TurnOnLeds
   Definitions
      At line 199 in file test.s
   Uses
      At line 280 in file test.s
      At line 293 in file test.s

WAIT 0000015C

Symbol: WAIT
   Definitions
      At line 264 in file test.s
   Uses
      At line 151 in file test.s
      At line 157 in file test.s
      At line 231 in file test.s
      At line 234 in file test.s
      At line 242 in file test.s
      At line 245 in file test.s
      At line 253 in file test.s
      At line 256 in file test.s
      At line 257 in file test.s

__main 00000000

Symbol: __main
   Definitions
      At line 65 in file test.s
   Uses
      At line 48 in file test.s
Comment: __main used once
wait1 0000015E



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: wait1
   Definitions
      At line 266 in file test.s
   Uses
      At line 268 in file test.s
Comment: wait1 used once
wait2 00000166

Symbol: wait2
   Definitions
      At line 277 in file test.s
   Uses
      At line 282 in file test.s
Comment: wait2 used once
wait3 00000178

Symbol: wait3
   Definitions
      At line 290 in file test.s
   Uses
      At line 295 in file test.s
Comment: wait3 used once
waitBumperRight 00000164

Symbol: waitBumperRight
   Definitions
      At line 275 in file test.s
   Uses
      At line 193 in file test.s
Comment: waitBumperRight used once
waitBumperleft 00000176

Symbol: waitBumperleft
   Definitions
      At line 288 in file test.s
   Uses
      At line 195 in file test.s
Comment: waitBumperleft used once
25 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 44 in file test.s
   Uses
      At line 122 in file test.s
      At line 126 in file test.s
      At line 129 in file test.s

BROCHE4 00000010

Symbol: BROCHE4
   Definitions
      At line 34 in file test.s
   Uses
      At line 206 in file test.s
      At line 218 in file test.s
      At line 219 in file test.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 32 in file test.s
   Uses
      At line 83 in file test.s
      At line 87 in file test.s
      At line 91 in file test.s
      At line 97 in file test.s
      At line 99 in file test.s
      At line 200 in file test.s
      At line 201 in file test.s
      At line 224 in file test.s

BROCHE5 00000020

Symbol: BROCHE5
   Definitions
      At line 36 in file test.s
   Uses
      At line 209 in file test.s
      At line 210 in file test.s
      At line 215 in file test.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 40 in file test.s
   Uses
      None
Comment: BROCHE6 unused
BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 38 in file test.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 107 in file test.s
      At line 111 in file test.s
      At line 114 in file test.s

BROCHE7 00000080

Symbol: BROCHE7
   Definitions
      At line 42 in file test.s
   Uses
      None
Comment: BROCHE7 unused
GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 29 in file test.s
   Uses
      At line 106 in file test.s
      At line 121 in file test.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 26 in file test.s
   Uses
      At line 86 in file test.s
      At line 110 in file test.s
      At line 125 in file test.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 18 in file test.s
   Uses
      At line 82 in file test.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 22 in file test.s
   Uses
      At line 90 in file test.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 13 in file test.s
   Uses
      At line 106 in file test.s
      At line 110 in file test.s
      At line 114 in file test.s

GPIO_PORTE_BASE 40024000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 14 in file test.s
   Uses
      At line 121 in file test.s
      At line 125 in file test.s
      At line 129 in file test.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 12 in file test.s
   Uses
      At line 82 in file test.s
      At line 86 in file test.s
      At line 90 in file test.s
      At line 99 in file test.s
      At line 200 in file test.s
      At line 206 in file test.s
      At line 209 in file test.s
      At line 215 in file test.s
      At line 218 in file test.s
      At line 224 in file test.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 9 in file test.s
   Uses
      At line 69 in file test.s
Comment: SYSCTL_PERIPH_GPIO used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 56 in file test.s
   Uses
      At line 229 in file test.s
      At line 232 in file test.s
      At line 240 in file test.s
      At line 251 in file test.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 55 in file test.s
   Uses
      At line 185 in file test.s
      At line 235 in file test.s
      At line 244 in file test.s
      At line 255 in file test.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 57 in file test.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 54 in file test.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 53 in file test.s
   Uses
      At line 181 in file test.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 62 in file test.s
   Uses
      At line 230 in file test.s
      At line 241 in file test.s
      At line 243 in file test.s
      At line 252 in file test.s
      At line 254 in file test.s

MOTEUR_GAUCHE_AVANT 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 61 in file test.s
   Uses
      At line 186 in file test.s
      At line 233 in file test.s
      At line 246 in file test.s
      At line 258 in file test.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 63 in file test.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 60 in file test.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 59 in file test.s
   Uses
      At line 182 in file test.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 51 in file test.s
   Uses
      At line 178 in file test.s
Comment: MOTEUR_INIT used once
11 symbols
388 symbols in table
