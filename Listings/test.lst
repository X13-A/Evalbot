


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ;; Les deux LEDs sont initialement allumées
    3 00000000         ;; Ce programme lis l'état du bouton poussoir 1 connecté
                       e au port GPIOD broche 6
    4 00000000         ;; Si bouton poussoir fermé ==> fait clignoter les deux 
                       LED1&2 connectée au port GPIOF broches 4&5.
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    9 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   10 00000000         
   11 00000000         ; The GPIODATA register is the data register
   12 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   13 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   14 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   15 00000000         
   16 00000000         ; configure the corresponding pin to be an output
   17 00000000         ; all GPIO pins are inputs by default
   18 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   19 00000000         
   20 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   21 00000000         ; By default, all GPIO pins have 2-mA drive.
   22 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   23 00000000         
   24 00000000         ; Digital enable register
   25 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   26 00000000 0000051C 



ARM Macro Assembler    Page 2 


                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   27 00000000         
   28 00000000         ; Pul_up
   29 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   30 00000000         
   31 00000000         ; Broches select
   32 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   33 00000000         
   34 00000000 00000010 
                       BROCHE4 EQU              0x10        ; led1 sur broche 4
                                                            
   35 00000000         
   36 00000000 00000020 
                       BROCHE5 EQU              0x20        ; led2 sur broche 5
                                                            
   37 00000000         
   38 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bouton poussoir 1
                                                             et 2 sur broche 6 
                                                            et 7
   39 00000000         
   40 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                             sur broche 6
   41 00000000         
   42 00000000 00000080 
                       BROCHE7 EQU              0x80        ; bouton poussoir 2
                                                             sur broche 7
   43 00000000         
   44 00000000 00000003 
                       BROCHE0_1
                               EQU              0x03        ; bumpers 1 et 2 su
                                                            r broche 0 et 1
   45 00000000         
   46 00000000         ; blinking frequency
   47 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   48 00000000         
   49 00000000         
   50 00000000                 ENTRY
   51 00000000                 EXPORT           __main
   52 00000000         
   53 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   54 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   55 00000000         



ARM Macro Assembler    Page 3 


   56 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   57 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   58 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   59 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   60 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   61 00000000         
   62 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   63 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   64 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   65 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   66 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   67 00000000         
   68 00000000         __main
   69 00000000         
   70 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   71 00000000         ; ;;         
   72 00000000 4E51            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   73 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b111
                                                            000)
   74 00000006         ; ;;                              (GPIO::FEDCBA)
   75 00000006 6030            str              r0, [r6]
   76 00000008         
   77 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   78 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   79 0000000A BF00            nop
   80 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   81 0000000E         
   82 0000000E         
   83 0000000E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION 2 LEDs
   84 0000000E         
   85 0000000E 4E4F            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 



ARM Macro Assembler    Page 4 


                                                            : 00010000)
   86 00000010 F04F 0030       ldr              r0, = BROCHE4_5
   87 00000014 6030            str              r0, [r6]
   88 00000016         
   89 00000016 4E4E            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   90 00000018 F04F 0030       ldr              r0, = BROCHE4_5
   91 0000001C 6030            str              r0, [r6]
   92 0000001E         
   93 0000001E 4E4D            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   94 00000020 F04F 0030       ldr              r0, = BROCHE4_5
   95 00000024 6030            str              r0, [r6]
   96 00000026         
   97 00000026 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
   98 0000002A         
   99 0000002A         ; allumer la led broche 4 (BROCHE4_5)
  100 0000002A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
  101 0000002E         
  102 0000002E 4E4A            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  103 00000030         
  104 00000030         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
  105 00000030         
  106 00000030         
  107 00000030         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 
  108 00000030         
  109 00000030 4F4A            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  110 00000032 F04F 00C0       ldr              r0, = BROCHE6_7
  111 00000036 6038            str              r0, [r7]
  112 00000038         
  113 00000038 4F49            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  114 0000003A F04F 00C0       ldr              r0, = BROCHE6_7
  115 0000003E 6038            str              r0, [r7]
  116 00000040         
  117 00000040 4F48            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6_7<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  118 00000042         
  119 00000042         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher
  120 00000042         



ARM Macro Assembler    Page 5 


  121 00000042         
  122 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper 
  123 00000042         
  124 00000042 F8DF 8124       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  125 00000046 F04F 0003       ldr              r0, = BROCHE0_1
  126 0000004A F8C8 0000       str              r0, [r8]
  127 0000004E         
  128 0000004E F8DF 811C       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  129 00000052 F04F 0003       ldr              r0, = BROCHE0_1
  130 00000056 F8C8 0000       str              r0, [r8]
  131 0000005A         
  132 0000005A F8DF 8114       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
0_1<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Bumper
  133 0000005E         
  134 0000005E         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Bumper 
  135 0000005E         
  136 0000005E         
  137 0000005E         LOOP
  138 0000005E F8D7 A000       ldr              r10, [r7]
  139 00000062 F1BA 0F40       CMP              r10, #0x40  ; Check if switch 1
                                                             is pushed
  140 00000066 D015            BEQ              Programme1
  141 00000068 F1BA 0F80       CMP              r10, #0x80  ; Check if switch 2
                                                             is pushed
  142 0000006C D000            BEQ              Programme2
  143 0000006E E7F6            B                LOOP
  144 00000070         
  145 00000070         
  146 00000070         
  147 00000070         Programme2
  148 00000070         
  149 00000070         Init
  150 00000070 F04F 0400       ldr              r4, =0x0
  151 00000074 F04F 0500       ldr              r5, =0x0
  152 00000078 E7FF            B                Main
  153 0000007A         
  154 0000007A         Main
  155 0000007A F1BA 0F40       CMP              r10, #0x40  ; Check if switch 1
                                                             is pushed
  156 0000007E D003            BEQ              gPlus1
  157 00000080 F1BA 0F80       CMP              r10, #0x80  ; Check if switch 2
                                                             is pushed
  158 00000084 D003            BEQ              dPlus1
  159 00000086 E7F8            B                Main
  160 00000088         
  161 00000088         gPlus1
  162 00000088 F104 0401       ADD              r4, #1
  163 0000008C E7F5            B                Main
  164 0000008E         
  165 0000008E         dPlus1
  166 0000008E F105 0501       ADD              r5, #1



ARM Macro Assembler    Page 6 


  167 00000092 E7F2            B                Main
  168 00000094         
  169 00000094         
  170 00000094         
  171 00000094         
  172 00000094         Programme1
  173 00000094         ; Configure les PWM + GPIO
  174 00000094 F7FF FFFE       BL               MOTEUR_INIT
  175 00000098         
  176 00000098         ; Activer les deux moteurs droit et gauche
  177 00000098 F7FF FFFE       BL               MOTEUR_DROIT_ON
  178 0000009C F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  179 000000A0         
  180 000000A0         ; Evalbot avance droit devant
  181 000000A0 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  182 000000A4 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  183 000000A8         
  184 000000A8         CheckBumpers
  185 000000A8 F8D8 A000       ldr              r10, [r8]
  186 000000AC F1BA 0F02       CMP              r10, #0x02  ; Check if left one
                                                             is pushed
  187 000000B0 D008            BEQ              TurnOnLed1
  188 000000B2 F1BA 0F01       CMP              r10, #0x01  ; check if right on
                                                            e is pushed
  189 000000B6 D00A            BEQ              TurnOnLed2
  190 000000B8         
  191 000000B8 E00E            B                TurnOffLeds ; if none, turn off
                                                             leds
  192 000000BA         
  193 000000BA         TurnOnLeds
  194 000000BA 4E27            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  195 000000BC F04F 0330       ldr              r3, = BROCHE4_5
  196 000000C0 6033            str              r3, [r6]
  197 000000C2 E7F1            B                CheckBumpers
  198 000000C4         
  199 000000C4         
  200 000000C4         
  201 000000C4         
  202 000000C4         TurnOnLed1
  203 000000C4         ;ldr r6, = GPIO_PORTF_BASE + (BROCHE5<<2)
  204 000000C4         ;str r2, [r6] ; Turns off Led 2
  205 000000C4         
  206 000000C4 4E2B            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4<<2)
  207 000000C6 F04F 0310       ldr              r3, = BROCHE4 ; Turns on Led 1
  208 000000CA 6033            str              r3, [r6]
  209 000000CC E016            B                LeftDirection
  210 000000CE         
  211 000000CE         
  212 000000CE         
  213 000000CE         TurnOnLed2
  214 000000CE         ;ldr r6, = GPIO_PORTF_BASE + (BROCHE4<<2)
  215 000000CE         ;str r2, [r6] ; Turns off Led 1
  216 000000CE         
  217 000000CE 4E2A            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
5<<2)
  218 000000D0 F04F 0320       ldr              r3, = BROCHE5
  219 000000D4 6033            str              r3, [r6]



ARM Macro Assembler    Page 7 


  220 000000D6 E002            B                RightDirection
  221 000000D8         
  222 000000D8         TurnOffLeds
  223 000000D8 4E1F            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  224 000000DA 6032            str              r2, [r6]
  225 000000DC E7E4            B                CheckBumpers
  226 000000DE         
  227 000000DE         RightDirection
  228 000000DE F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  229 000000E2 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  230 000000E6 F000 F829       BL               WAIT
  231 000000EA F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ; MOTEUR_D
                                                            ROIT_INVERSE
  232 000000EE F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  233 000000F2 F000 F823       BL               WAIT
  234 000000F6 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  235 000000FA E7D5            B                CheckBumpers
  236 000000FC         
  237 000000FC         
  238 000000FC         LeftDirection
  239 000000FC F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  240 00000100 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  241 00000104 F000 F81A       BL               WAIT
  242 00000108 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  243 0000010C F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  244 00000110 F000 F814       BL               WAIT
  245 00000114 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  246 00000118 E7C6            B                CheckBumpers
  247 0000011A         
  248 0000011A         HalfTurn
  249 0000011A F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  250 0000011E F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  251 00000122 F000 F80B       BL               WAIT
  252 00000126 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  253 0000012A F000 F807       BL               WAIT
  254 0000012E F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ; MOTEUR_
                                                            GAUCHE_INVERSE
  255 00000132 F000 F803       BL               WAIT
  256 00000136 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  257 0000013A E7B5            B                CheckBumpers
  258 0000013C         
  259 0000013C         
  260 0000013C         ;; Boucle d'attante
  261 0000013C 490F    WAIT    ldr              r1, =0x2BFFFF
  262 0000013E 3901    wait1   subs             r1, #1
  263 00000140 D1FD            bne              wait1
  264 00000142         
  265 00000142         ;; retour à la suite du lien de branchement
  266 00000142 4770            BX               LR
  267 00000144         
  268 00000144         
  269 00000144 BF00            nop
  270 00000146                 END
              00 00 400FE108 
              40025400 
              4002551C 



ARM Macro Assembler    Page 8 


              40025500 
              400250C0 
              40007510 
              4000751C 
              40007300 
              40024510 
              4002451C 
              4002400C 
              40025040 
              40025080 
              002BFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\test.d -o.\objects\test.o -I.\RTE\_Target_1 -I"D:\Progra
m Files\ARM Keil\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Program Files\
ARM Keil\Packs\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include" --predefine="__EVAL S
ETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 528"
 --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\listings\test.
lst test.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file test.s
   Uses
      None
Comment: .text unused
CheckBumpers 000000A8

Symbol: CheckBumpers
   Definitions
      At line 184 in file test.s
   Uses
      At line 197 in file test.s
      At line 225 in file test.s
      At line 235 in file test.s
      At line 246 in file test.s
      At line 257 in file test.s

HalfTurn 0000011A

Symbol: HalfTurn
   Definitions
      At line 248 in file test.s
   Uses
      None
Comment: HalfTurn unused
Init 00000070

Symbol: Init
   Definitions
      At line 149 in file test.s
   Uses
      None
Comment: Init unused
LOOP 0000005E

Symbol: LOOP
   Definitions
      At line 137 in file test.s
   Uses
      At line 143 in file test.s
Comment: LOOP used once
LeftDirection 000000FC

Symbol: LeftDirection
   Definitions
      At line 238 in file test.s
   Uses
      At line 209 in file test.s
Comment: LeftDirection used once
Main 0000007A

Symbol: Main
   Definitions
      At line 154 in file test.s
   Uses
      At line 152 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 159 in file test.s
      At line 163 in file test.s
      At line 167 in file test.s

Programme1 00000094

Symbol: Programme1
   Definitions
      At line 172 in file test.s
   Uses
      At line 140 in file test.s
Comment: Programme1 used once
Programme2 00000070

Symbol: Programme2
   Definitions
      At line 147 in file test.s
   Uses
      At line 142 in file test.s
Comment: Programme2 used once
RightDirection 000000DE

Symbol: RightDirection
   Definitions
      At line 227 in file test.s
   Uses
      At line 220 in file test.s
Comment: RightDirection used once
TurnOffLeds 000000D8

Symbol: TurnOffLeds
   Definitions
      At line 222 in file test.s
   Uses
      At line 191 in file test.s
Comment: TurnOffLeds used once
TurnOnLed1 000000C4

Symbol: TurnOnLed1
   Definitions
      At line 202 in file test.s
   Uses
      At line 187 in file test.s
Comment: TurnOnLed1 used once
TurnOnLed2 000000CE

Symbol: TurnOnLed2
   Definitions
      At line 213 in file test.s
   Uses
      At line 189 in file test.s
Comment: TurnOnLed2 used once
TurnOnLeds 000000BA

Symbol: TurnOnLeds
   Definitions
      At line 193 in file test.s
   Uses
      None



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: TurnOnLeds unused
WAIT 0000013C

Symbol: WAIT
   Definitions
      At line 261 in file test.s
   Uses
      At line 230 in file test.s
      At line 233 in file test.s
      At line 241 in file test.s
      At line 244 in file test.s
      At line 251 in file test.s
      At line 253 in file test.s
      At line 255 in file test.s

__main 00000000

Symbol: __main
   Definitions
      At line 68 in file test.s
   Uses
      At line 51 in file test.s
Comment: __main used once
dPlus1 0000008E

Symbol: dPlus1
   Definitions
      At line 165 in file test.s
   Uses
      At line 158 in file test.s
Comment: dPlus1 used once
gPlus1 00000088

Symbol: gPlus1
   Definitions
      At line 161 in file test.s
   Uses
      At line 156 in file test.s
Comment: gPlus1 used once
wait1 0000013E

Symbol: wait1
   Definitions
      At line 262 in file test.s
   Uses
      At line 263 in file test.s
Comment: wait1 used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 44 in file test.s
   Uses
      At line 125 in file test.s
      At line 129 in file test.s
      At line 132 in file test.s

BROCHE4 00000010

Symbol: BROCHE4
   Definitions
      At line 34 in file test.s
   Uses
      At line 206 in file test.s
      At line 207 in file test.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 32 in file test.s
   Uses
      At line 86 in file test.s
      At line 90 in file test.s
      At line 94 in file test.s
      At line 100 in file test.s
      At line 102 in file test.s
      At line 194 in file test.s
      At line 195 in file test.s
      At line 223 in file test.s

BROCHE5 00000020

Symbol: BROCHE5
   Definitions
      At line 36 in file test.s
   Uses
      At line 217 in file test.s
      At line 218 in file test.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 40 in file test.s
   Uses
      None
Comment: BROCHE6 unused
BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 38 in file test.s
   Uses
      At line 110 in file test.s
      At line 114 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 117 in file test.s

BROCHE7 00000080

Symbol: BROCHE7
   Definitions
      At line 42 in file test.s
   Uses
      None
Comment: BROCHE7 unused
DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 47 in file test.s
   Uses
      None
Comment: DUREE unused
GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 29 in file test.s
   Uses
      At line 109 in file test.s
      At line 124 in file test.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 26 in file test.s
   Uses
      At line 89 in file test.s
      At line 113 in file test.s
      At line 128 in file test.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 18 in file test.s
   Uses
      At line 85 in file test.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 22 in file test.s
   Uses
      At line 93 in file test.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 13 in file test.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 109 in file test.s
      At line 113 in file test.s
      At line 117 in file test.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 14 in file test.s
   Uses
      At line 124 in file test.s
      At line 128 in file test.s
      At line 132 in file test.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 12 in file test.s
   Uses
      At line 85 in file test.s
      At line 89 in file test.s
      At line 93 in file test.s
      At line 102 in file test.s
      At line 194 in file test.s
      At line 206 in file test.s
      At line 217 in file test.s
      At line 223 in file test.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 9 in file test.s
   Uses
      At line 72 in file test.s
Comment: SYSCTL_PERIPH_GPIO used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 59 in file test.s
   Uses
      At line 228 in file test.s
      At line 231 in file test.s
      At line 239 in file test.s
      At line 249 in file test.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 58 in file test.s
   Uses
      At line 181 in file test.s
      At line 234 in file test.s
      At line 243 in file test.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 60 in file test.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 57 in file test.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 56 in file test.s
   Uses
      At line 177 in file test.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 65 in file test.s
   Uses
      At line 229 in file test.s
      At line 240 in file test.s
      At line 242 in file test.s
      At line 250 in file test.s
      At line 252 in file test.s
      At line 254 in file test.s

MOTEUR_GAUCHE_AVANT 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 64 in file test.s
   Uses
      At line 182 in file test.s
      At line 232 in file test.s
      At line 245 in file test.s
      At line 256 in file test.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 66 in file test.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 63 in file test.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 62 in file test.s
   Uses
      At line 178 in file test.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 54 in file test.s
   Uses
      At line 174 in file test.s
Comment: MOTEUR_INIT used once
11 symbols
383 symbols in table
